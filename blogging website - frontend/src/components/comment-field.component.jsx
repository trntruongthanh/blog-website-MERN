import clsx from "clsx";
import axios from "axios";
import toast, { Toaster } from "react-hot-toast";
import { useContext, useState } from "react";

import { UserContext } from "../App";
import { BlogContext } from "../pages/blog.page";

import Button from "./button";

/*
  User->>Frontend: Click "Post Comment"
  Frontend->>Server: POST /add-comment-interaction
  Server->>MongoDB: Create Comment, Update Blog, Save Notification
  MongoDB-->>Server: Acknowledge
  Server-->>Frontend: Return comment data
  Frontend->>Frontend: C·∫≠p nh·∫≠t UI v√† blog.comment.result
  User->>Frontend: Cu·ªôn xem th√™m comment
  Frontend->>Server: POST /get-blog-comments
  Server->>MongoDB: T√¨m comment cha
  MongoDB-->>Server: Tr·∫£ comment
  Server-->>Frontend: G·ª≠i comment populated
  Frontend->>Frontend: Hi·ªÉn th·ªã th√™m comment

  comment: n·ªôi dung text ng∆∞·ªùi d√πng ƒëang nh·∫≠p.
  comments: object ch·ª©a c√°c th√¥ng tin li√™n quan ƒë·∫øn comment trong blog.
  commentsArr: m·∫£ng ch·ª©a c√°c comment ƒë√£ ƒë∆∞·ª£c load (hi·ªÉn th·ªã trong UI).
*/

const CommentField = ({
  action,
  index = undefined,
  replyingTo = undefined,
  setIsReplying,
}) => {
  const {
    userAuth: { access_token, username, fullname, profile_img },
  } = useContext(UserContext);

  const {
    blog,
    blog: {
      comments,
      comments: { results: commentsArr },
    },
    setBlog,
    activity,
    setTotalParentCommentsLoaded,
  } = useContext(BlogContext);

  const _id = blog?._id;
  const blog_author = blog?.author?._id;

  const total_comments = activity?.total_comments ?? 0;
  const total_parent_comments = activity?.total_parent_comments ?? 0;

  //========================================================================================

  // console.log(blog);
  // console.log(commentsArr);

  const [comment, setComment] = useState("");

  const hasComment = comment.trim() !== ""; // x·ª≠ l√Ω n√∫t comment khi c√≥ n·ªôi dung

  //========================================================================================

  const handleComment = async () => {
    if (!access_token) {
      return toast.error("Login first to leave a comment !");
    }

    if (!comment.length) {
      return toast.error("Write something to leave a comment...");
    }

    if (!comment.trim().length) {
      return toast.error("Write something to leave a comment...");
    }

    try {
      const { data } = await axios.post(
        import.meta.env.VITE_SERVER_DOMAIN + "/add-comment",
        {
          _id,
          blog_author,
          comment,
          replying_to: replyingTo,
        },
        {
          headers: {
            Authorization: `Bearer ${access_token}`,
          },
        }
      );

      // console.log(data);

      setComment("");   // Reset khung nh·∫≠p sau khi g·ª≠i th√†nh c√¥ng

      
      //üì¶ Server ch·ªâ tr·∫£ v·ªÅ ID ng∆∞·ªùi comment, n√™n ta th√™m th·ªß c√¥ng th√¥ng tin user hi·ªán t·∫°i ƒë·ªÉ render avatar/t√™n trong UI m√† kh√¥ng c·∫ßn fetch th√™m.
      
      data.commented_by = {
        personal_info: { username, fullname, profile_img },
      };

      let newCommentArr;

      /* C√≥ t·ªìn t·∫°i replyingTo nghƒ©a l√† user ƒëang ph·∫£n h·ªìi (reply) m·ªôt comment kh√°c 

        Th√™m ID c·ªßa reply m·ªõi v√†o m·∫£ng children c·ªßa comment cha (ƒë∆∞·ª£c x√°c ƒë·ªãnh b·∫±ng index trong m·∫£ng commentsArr). 
        ƒêi·ªÅu n√†y gi√∫p x√¢y ƒë∆∞·ª£c m·ªëi quan h·ªá cha - con trong UI.

        X√°c ƒë·ªãnh c·∫•p ƒë·ªô hi·ªÉn th·ªã c·ªßa reply (v√≠ d·ª• ƒë·ªÉ canh l·ªÅ tr√°i).
        N·∫øu comment cha ƒëang ·ªü c·∫•p ƒë·ªô 0 ‚Üí reply s·∫Ω ·ªü c·∫•p ƒë·ªô 1 ‚Üí c√≥ th·ªÉ d√πng ƒë·ªÉ indent trong UI.
      
        Ghi l·∫°i ch·ªâ s·ªë index c·ªßa comment cha ‚Üí gi√∫p sau n√†y c√≥ th·ªÉ t√¨m l·∫°i comment cha n·∫øu c·∫ßn (v√≠ d·ª• khi collapse reply, c·∫≠p nh·∫≠t reply, v.v.)
      
        ƒê√°nh d·∫•u comment cha ƒë√£ load reply ‚Üí gi√∫p ki·ªÉm so√°t hi·ªÉn th·ªã (v√≠ d·ª• tr√°nh g·ªçi API l·∫°i n·ªØa).

        index + 1 ‚Üí ch√®n ngay sau comment cha
        0 ‚Üí kh√¥ng x√≥a ph·∫ßn t·ª≠ n√†o
        data ‚Üí l√† comment m·ªõi (reply)

        G√°n l·∫°i m·∫£ng m·ªõi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ d√πng trong setBlog
      
        */
      if (replyingTo) {
        commentsArr[index].children.push(data._id);   

        data.childrenLevel = commentsArr[index].childrenLevel + 1;
        data.parentIndex = index;

        commentsArr[index].isReplyLoaded = true;

        commentsArr.splice(index + 1, 0, data);       // array.splice(start, deleteCount, item1, item2, ...)

        newCommentArr = commentsArr;

        setIsReplying(false);

      } else {

        /* Tr∆∞·ªùng h·ª£p l√† Comment cha (else) 
          ƒê√¢y l√† comment tr·ª±c ti·∫øp v√†o blog (kh√¥ng ph·∫£i reply), n√™n c·∫•p ƒë·ªô = 0
          Th√™m comment m·ªõi v√†o ƒë·∫ßu danh s√°ch comment cha (v√¨ th∆∞·ªùng m·ªõi nh·∫•t s·∫Ω hi·ªÉn th·ªã tr∆∞·ªõc
        */
        data.childrenLevel = 0;

        newCommentArr = [data, ...commentsArr];
      }

      let parentCommentIncrementVal = 1;

      setBlog({
        ...blog,
        comments: {
          ...comments,
          results: newCommentArr,
        },
        activity: {
          ...activity,
          total_comments: total_comments + 1,
          total_parent_comments: total_parent_comments + parentCommentIncrementVal,
        },
      });

      setTotalParentCommentsLoaded((prev) => !prev + parentCommentIncrementVal);
    } catch (error) {
      console.log(error);
    }
  };

  //========================================================================================

  return (
    <>
      <Toaster />

      <textarea
        value={comment}
        placeholder={`Reply to ${fullname}...`}
        className="input-box pl-5 placeholder:text-dark-grey resize-none h-[150px] overflow-auto"
        onChange={(e) => setComment(e.target.value)}
        rows={3}
      ></textarea>

      {/* 
        clsx(
          "c√°c-class-c·ªë-ƒë·ªãnh",
          {
            "class-c√≥-ƒëi·ªÅu-ki·ªán": ƒëi·ªÅu_ki·ªán_boolean,
          }
        )
      */}
      <Button
        onClick={handleComment}
        disabled={!hasComment}
        className={clsx(
          "mt-2 mb-4 border border-lavender bg-white text-black px-4 py-2 rounded-md",
          {
            "btn-shadow hover:bg-gray-200": hasComment,
          }
        )}
      >
        {action}
      </Button>
    </>
  );
};

export default CommentField;
