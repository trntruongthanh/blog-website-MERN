import { useEffect, useRef, useState } from "react";
import Button from "./Button";

/*
  ref trong React d√πng ƒë·ªÉ truy c·∫≠p tr·ª±c ti·∫øp ƒë·∫øn m·ªôt DOM element ho·∫∑c m·ªôt React component.
  Nh∆∞ng khi b·∫°n d√πng ref cho m·ªôt component do b·∫°n t·∫°o (<Button />) th√¨ sao?
  <Button ref={btnRef}>Click</Button>

üëâL√∫c n√†y, m·∫∑c ƒë·ªãnh React kh√¥ng bi·∫øt ref ƒë√≥ mu·ªën tr·ªè t·ªõi c√°i g√¨ trong Button.jsx, v√¨ n√≥ l√† m·ªôt component.
  N·∫øu b·∫°n kh√¥ng l√†m g√¨, btnRef.current s·∫Ω l√† undefined.
*/

const InPageNavigation = ({
  routes,
  defaultHidden = [],
  defaultActiveIndex = 0,
  children,
}) => {
  let activeTabLineRef = useRef();
  let activeTabRef = useRef();

  const [inPageNavIndex, setInPageNavIndex] = useState(defaultActiveIndex);

  const changPageState = (btn, index) => {
    /*
      offsetWidth	Chi·ªÅu r·ªông c·ªßa ph·∫ßn t·ª≠ btn t√≠nh b·∫±ng pixel (bao g·ªìm padding + border).
      offsetLeft	Kho·∫£ng c√°ch t·ª´ c·∫°nh tr√°i c·ªßa btn ƒë·∫øn c·∫°nh tr√°i c·ªßa ph·∫ßn t·ª≠ cha ch·ª©a n√≥.

      D√≤ng 1: CƒÉn ch·ªânh chi·ªÅu r·ªông underline b·∫±ng ƒë√∫ng chi·ªÅu r·ªông c·ªßa n√∫t tab.
      D√≤ng 2: Di chuy·ªÉn underline t·ªõi ƒë√∫ng v·ªã tr√≠ n√∫t tab ƒëang ƒë∆∞·ª£c ch·ªçn.


    */
    let { offsetWidth, offsetLeft } = btn;

    activeTabLineRef.current.style.width = offsetWidth + "px";
    activeTabLineRef.current.style.left = offsetLeft + "px";

    setInPageNavIndex(index);
  };

  useEffect(() => {
    if (activeTabRef.current) {
      changPageState(activeTabRef.current, inPageNavIndex);
    }
  }, [routes]);

  //========================================================================================

  /*
    React ng·∫ßm hi·ªÉu r·∫±ng b·∫°n ƒëang truy·ªÅn nhi·ªÅu ph·∫ßn t·ª≠ con (children) v√†o InPageNavigation. V√† khi c√≥ nhi·ªÅu ph·∫ßn t·ª≠ c√πng c·∫•p, React s·∫Ω t·ª± gom ch√∫ng th√†nh m·ªôt m·∫£ng.
    {Array.isArray(children) ? children[inPageNavIndex] : children}
    D√≤ng ref={index === defaultActiveIndex ? activeTabRef : null} ch·ªâ c√≥ t√°c d·ª•ng l√∫c component render, ƒë·ªÉ g√°n ref cho tab m·∫∑c ƒë·ªãnh (th∆∞·ªùng l√† tab ƒë·∫ßu ti√™n).
  */

  return (
    <>
      <div className="relative mb-8 bg-white border-b border-grey flex flex-nowrap overflow-x-auto">
        {routes.map((route, index) => {
          return (
            <Button
              onClick={(event) => changPageState(event.currentTarget, index)}
              ref={index === defaultActiveIndex ? activeTabRef : null}
              key={index}
              className={
                "p-4 px-5 capitalize " +
                (inPageNavIndex === index ? "text-black" : "text-dark-grey ") +
                (defaultHidden.includes(route) ? "md:hidden " : " ")
              }
            >
              {route}
            </Button>
          );
        })}

        <hr
          ref={activeTabLineRef}
          className="absolute bottom-0 h-[2px] bg-black transition-all duration-300"
        />
      </div>

      {Array.isArray(children) ? children[inPageNavIndex] : children}
    </>
  );
};

export default InPageNavigation;
