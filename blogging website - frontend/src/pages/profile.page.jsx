import axios from "axios";
import { useContext, useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";

import { UserContext } from "../App";

import AnimationWrapper from "../common/page-animation";
import Loader from "../components/loader.component";
import AboutUser from "../components/about.component";
import filterPaginationData from "../common/filter-pagination-data";
import InPageNavigation from "../components/inpage-navigation.component";
import BlogPostCard from "../components/blog-post.component";
import NoDataMessage from "../components/nodata.component";
import LoadMoreDataBtn from "../components/load-more.component";
import PageNotFound from "./404.page";

export const profileDataStructure = {
  personal_info: {
    fullname: "",
    username: "",
    profile_img: "",
    bio: "",
  },
  account_info: {
    total_posts: 0,
    total_reads: 0,
  },
  social_links: {},
  joinedAt: "",
};

const ProfilePage = () => {
  const { id: profileId } = useParams();

  const [profile, setProfile] = useState(profileDataStructure);
  const [loading, setLoading] = useState(true);
  const [blogs, setBlogs] = useState(null);
  const [profileLoaded, setProfileLoaded] = useState("");

  const {
    personal_info: { fullname, username: profile_username, profile_img, bio },
    account_info: { total_posts, total_reads },
    social_links,
    joinedAt,
  } = profile;

  const {
    userAuth: { username },
  } = useContext(UserContext);

  //========================================================================================

  const fetchUserProfile = async () => {
    try {
      const {
        data: { user },
      } = await axios.post(
        import.meta.env.VITE_SERVER_DOMAIN + "/get-profile",
        { username: profileId }
      );

      if (!user) {
        setLoading(false); // Kh√¥ng t√¨m th·∫•y user ‚Üí d·ª´ng loading ‚Üí PageNotFound
        return;
      }

      setProfile(user);

      setProfileLoaded(profileId);

      getBlogs({ user_id: user._id, create_new_arr: true });

      setLoading(false); // <- D·ª™NG LOADING sau khi t·∫£i th√†nh c√¥ng
    } catch (error) {
      console.log(error);
      setLoading(false); // <- D·ª™NG LOADING n·∫øu c√≥ l·ªói khi g·ªçi API
    }
  };

  //===========================================================================================

  /*
    N√≥ ki·ªÉm tra xem tham s·ªë user_id c√≥ ƒë∆∞·ª£c truy·ªÅn v√†o kh√¥ng:
    N·∫øu user_id b·ªã undefined ‚Üí t·ª©c l√† g·ªçi getBlogs() m√† kh√¥ng truy·ªÅn user_id m·ªõi ‚Üí s·∫Ω d√πng blogs.user_id ƒë√£ c√≥ s·∫µn t·ª´ tr∆∞·ªõc (ƒë√£ l∆∞u trong state).
    N·∫øu user_id c√≥ gi√° tr·ªã ‚Üí d√πng gi√° tr·ªã ƒë∆∞·ª£c truy·ªÅn v√†o ƒë√≥.
  */

  const getBlogs = async ({ page = 1, user_id, create_new_arr = false }) => {
    try {
      user_id = user_id === undefined ? blogs.user_id : user_id;

      if (!user_id) return;

      const { data } = await axios.post(
        import.meta.env.VITE_SERVER_DOMAIN + "/search-blogs",
        { author: user_id, page }
      );

      let formatedData = await filterPaginationData({
        state: blogs,
        data: data.blogs,
        page,
        countRoute: "/search-blogs-count",
        data_to_send: { author: user_id },
        create_new_arr,
      });


      /*
        Ghi l·∫°i user_id v√†o trong object formatedData ƒë·ªÉ c√≥ th·ªÉ d√πng l·∫°i ·ªü l·∫ßn g·ªçi sau
        (gi·ªëng nh∆∞ "ghi nh·ªõ" user ƒë√≥ l√† ai).

        V√¨ ƒëo·∫°n ƒë·∫ßu c·ªßa h√†m getBlogs c√≥ logic sau: user_id = user_id === undefined ? blogs.user_id : user_id;
        N·∫øu b·∫°n kh√¥ng truy·ªÅn user_id v√†o h√†m getBlogs (v√≠ d·ª• khi load th√™m trang m·ªõi trong pagination),
        Th√¨ n√≥ s·∫Ω l·∫•y user_id t·ª´ blogs.user_id (ƒë∆∞·ª£c l∆∞u t·ª´ l·∫ßn g·ªçi tr∆∞·ªõc ƒë√≥).
        
        ‚û°Ô∏è ƒê·ªÉ blogs.user_id t·ªìn t·∫°i th√¨ b·∫°n ph·∫£i g√°n user_id v√†o formatedData tr∆∞·ªõc khi setBlogs(formatedData).
      */
      formatedData.user_id = user_id;

      setBlogs(formatedData);
    } catch (error) {
      console.log(error);
    }
  };

  /*
    Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc:
    profileId !== profileLoaded:
    N·∫øu b·∫°n ƒëang truy c·∫≠p m·ªôt trang profile m·ªõi (VD: t·ª´ /user/john chuy·ªÉn sang /user/jane), th√¨ profileId s·∫Ω kh√°c profileLoaded.
    B·∫°n x√≥a d·ªØ li·ªáu blog c≈© b·∫±ng setBlogs(null) ƒë·ªÉ chu·∫©n b·ªã fetch m·ªõi.
    blogs === null:
    ƒê√¢y l√† d·∫•u hi·ªáu ƒë·ªÉ bi·∫øt c·∫ßn fetch l·∫°i data.
    Khi blogs b·ªã set null, b·∫°n g·ªçi resetStates() v√† fetchUserProfile().
    Trong fetchUserProfile():


    ‚úÖ 1. Khi profileId thay ƒë·ªïi:
    ƒêi·ªÅu n√†y x·∫£y ra khi b·∫°n chuy·ªÉn sang profile kh√°c tr√™n URL, v√≠ d·ª•:
    T·ª´ /profile/john ‚Üí /profile/susan
    useParams() s·∫Ω l·∫•y profileId m·ªõi.
    V√¨ profileId !== profileLoaded, d√≤ng setBlogs(null) s·∫Ω ch·∫°y ‚Üí trigger blogs thay ƒë·ªïi ‚Üí useEffect ch·∫°y ti·∫øp l·∫ßn n·ªØa.

    ‚úÖ 2. Khi blogs b·ªã set l·∫°i (setBlogs(null)):
    Sau khi set blogs = null ·ªü b∆∞·ªõc 1, effect ch·∫°y l·∫°i l·∫ßn n·ªØa, v√† do blogs === null, b·∫°n ti·∫øp t·ª•c:
    G·ªçi resetStates() ‚Üí reset profile, loading, profileLoaded
    G·ªçi fetchUserProfile() ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi

    ‚úÖ 3. Khi blog ƒë√£ ƒë∆∞·ª£c fetch v√† b·∫°n setBlogs(data):
    L√∫c ƒë√≥, blogs t·ª´ null ‚Üí object ‚Üí hook kh√¥ng ch·∫°y l·∫°i n·ªØa, v√¨ blogs v√† profileId kh√¥ng thay ƒë·ªïi ti·∫øp.

    D√≤ng if (profileId !== profileLoaded) setBlogs(null) ch·ªâ c√≥ t√°c d·ª•ng khi profileId ƒë·ªïi v√† blogs !== null.
    N·∫øu blogs ƒë√£ l√† null r·ªìi ‚Üí setBlogs(null) kh√¥ng t·∫°o side effect g√¨ n·ªØa ‚Üí useEffect s·∫Ω kh√¥ng b·ªã loop v√¥ h·∫°n.

  */

  const resetStates = () => {
    setProfile(profileDataStructure);
    setLoading(true);
    setProfileLoaded("");
  };

  useEffect(() => {
    if (profileId !== profileLoaded) {
      setBlogs(null);
    }

    if (blogs === null) {
      resetStates();
      fetchUserProfile();
    }
  }, [profileId, blogs]);

  
  /*
    üß† ƒê·ªçc theo logic:
    N·∫øu loading === true ‚Üí render <Loader />
    ‚Üí ‚è≥ Trang ƒëang t·∫£i d·ªØ li·ªáu ‚Üí hi·ªÉn th·ªã spinner.

    N·∫øu loading === false, ki·ªÉm ti·∫øp:

    N·∫øu profile_username.length > 0 ‚Üí render <section>...</section>
    ‚Üí ‚úÖ C√≥ d·ªØ li·ªáu user ‚Üí hi·ªÉn th·ªã trang profile.

    N·∫øu profile_username.length === 0 ‚Üí render <PageNotFound />
    ‚Üí ‚ùå Kh√¥ng c√≥ username (t·ª©c l√† profile kh√¥ng h·ª£p l·ªá) ‚Üí hi·ªÉn th·ªã 404.
  */

  return (
    <AnimationWrapper>
      {loading ? (
        <Loader /> // üîÅ loading === true ‚Üí hi·ªÉn th·ªã spinner
      ) : profile_username.length ? (
        <section className="h-cover md:flex flex-row-reverse items-start gap-5 min-[1100px]:gap-12">
          <div className="flex flex-col max-md:items-center gap-5 min-w-[250px] md:w-[50%] md:pl-8 md:border-l border-grey md:sticky md:top-[100px] md:py-10">
            <img
              src={profile_img}
              className="w-48 h-48 bg-grey rounded-full md:w-32 md:h-32"
            />

            <h1 className="text-2xl font-medium">@{profile_username}</h1>
            <p className="text-xl capitalize h-6">{fullname}</p>

            <p>
              {total_posts.toLocaleString()} Blogs -{" "}
              {total_reads.toLocaleString()} Reads
            </p>

            <div className="flex gap-4 mt-2">
              {profileId === username ? (
                <Link
                  to="/setting/edit-profile"
                  className="btn-light rounded-md hover:bg-lavender"
                >
                  Edit Profile
                </Link>
              ) : (
                ""
              )}
            </div>

            <AboutUser className="max-md:hidden" dataProfile={profile} />
          </div>

          <div className="max-md:mt-12 w-full">
            <InPageNavigation
              routes={["Blogs Published", "About"]}
              defaultHidden={["About"]}
            >
              <>
                {blogs === null ? (
                  <Loader />
                ) : blogs.results.length ? (
                  blogs.results.map((blog, index) => {
                    return (
                      <AnimationWrapper
                        transition={{ duration: 0.6, delay: index * 0.1 }}
                        key={index}
                      >
                        <BlogPostCard data={blog} />
                      </AnimationWrapper>
                    );
                  })
                ) : (
                  <NoDataMessage message="No blogs published" />
                )}

                <LoadMoreDataBtn state={blogs} fetchDataFunc={getBlogs} />
              </>

              <AboutUser dataProfile={profile} />
            </InPageNavigation>
          </div>
        </section>
      ) : (
        <PageNotFound /> // ‚úÖ loading === false, kh√¥ng c√≥ username ‚Üí 404
      )}
    </AnimationWrapper>
  );
};

export default ProfilePage;
